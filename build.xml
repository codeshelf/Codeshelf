<?xml version="1.0" encoding="UTF-8"?>

<project name="Codeshelf" default="build.all" basedir=".">

	<description>
		Codeshelf build script.
        </description>

	<property file="${basedir}/conf/version.properties" />

	<description>Codeshelf Build</description>
	<!--set global properties for this build-->
	<property name="src" location="${basedir}/src" />
	<property name="libs.dir" location="${basedir}/lib" />
	<property name="libs.dist.dir" location="${basedir}/lib/dist" />
	<property name="libs.native.dir" location="${basedir}/lib/native" />
	<property name="libs.test.dir" location="${libs.dir}/junit" />
	<property name="target" location="${basedir}/target" />
	<property name="target.build" location="${target}/build" />
	<property name="target.compiled.classes" location="${target.build}/compiled-classes" />
	<property name="target.resources" location="${target.build}/resources" />
	<property name="target.lib" location="${target.build}/lib" />
	<property name="target.web" location="${target.build}/web" />
	<property name="target.native.dir" location="${target.lib}/native" />
	<property name="target.docs" location="${target.build}/docs" />
	<property name="target.test" location="${target}/test" />
	<property name="target.report" location="${target}/report" />
	<property name="test.dir" location="${basedir}/test" />
	<property name="bin" location="${target.build}/bin" />
	<property name="conf.dir" location="${basedir}/conf" />
	<property name="liquibase.dir" location="${basedir}/liquibase/changeLogs" />
	<property name="web.dir" location="${basedir}/web" />
	<property name="resources.dir" location="${basedir}/resources" />

	<property name="javac.compile.using.version" value="1.7" />

	<property name="appjar.build.dir" value="${target}/appjar" />

	<!-- Define the compile set -->
	<path id="compile-libs">
		<fileset dir="${target.lib}" includes="*.jar" />
	</path>
	<path id="test-libs">
		<fileset dir="${libs.test.dir}" includes="*.jar" />
	</path>

	<!-- clean =================================================================================== -->
	<target name="clean" description="Deletes files generated during the build.">
		<!--Delete created directory trees-->
		<delete includeemptydirs="true" failonerror="false" verbose="false" includes="*.* .*">
			<fileset dir="${target}" followsymlinks="false" />
		</delete>
	</target>

	<!-- init =================================================================================== -->
	<target name="init">
		<!-- Check for min build requirements -->
		<condition property="ant.not.ok" value="true">
			<not>
				<or>
					<contains string="${ant.version}" substring="1.6" />
					<contains string="${ant.version}" substring="1.7" />
					<contains string="${ant.version}" substring="1.8" />
					<contains string="${ant.version}" substring="1.9" />
				</or>
			</not>
		</condition>
		<condition property="java.not.ok" value="true">
			<not>
				<or>
					<contains string="${ant.java.version}" substring="1.7" />
					<contains string="${ant.java.version}" substring="1.8" />
				</or>
			</not>
		</condition>
		<fail if="ant.not.ok" message="Must use Ant 1.6.x, 1.7.x, or 1.8.x to build CodeShelf" />
		<fail if="java.not.ok" message="Must use JDK 1.7.x or higher to build CodeShelf" />

		<!-- Platform-specific initializations -->
		<condition property="windows">
			<os family="windows" />
		</condition>
		<condition property="unix">
			<os family="unix" />
		</condition>
		<condition property="solaris">
			<os name="SunOS" />
		</condition>
		<condition property="linux">
			<os name="Linux" />
		</condition>
		<condition property="osx">
			<os name="Mac OS X" />
		</condition>

		<!--creates the build directory-->
		<mkdir dir="${target}" />
		<mkdir dir="${target.compiled.classes}" />
		<mkdir dir="${target.build}" />
		<mkdir dir="${target.resources}" />
		<mkdir dir="${target.lib}" />
		<mkdir dir="${target.native.dir}" />
		<mkdir dir="${target.docs}" />

	</target>

	<!-- resources =================================================================================== -->
	<target name="resources">
		<copy todir="${target.resources}">
			<fileset dir="${conf.dir}">
				<include name="common.config.properties" />
				<include name="server.config.properties" />
				<include name="sitecontroller.config.properties" />
				<include name="test.config.properties" />
				<include name="property-defaults.csv" />
				
				<include name="log4j.properties" />
				<include name="version.properties" />

				<include name="commons-logging.properties" />
				<include name="logging.properties" />
				
				<include name="hibernate.tenant.xml" />
				<include name="hibernate.test.xml" />
			</fileset>
			<fileset dir="${liquibase.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${target.web}">
			<fileset dir="${web.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<!-- build =================================================================================== -->
	<target name="compile" depends="init, resources">

		<copy todir="${target.lib}">
			<fileset dir="${libs.dist.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${target.native.dir}">
			<fileset dir="${libs.native.dir}">
				<include name="*/**.*" />
			</fileset>
		</copy>
		<echo message="${toString:compile-libs}" />

		<!--Compiles the java code from ${src} directory into ${target.compiled.classes} directory-->
		<javac destdir="${target.compiled.classes}" sourcepath="" source="${javac.compile.using.version}" target="${javac.compile.using.version}" verbose="false" compiler="modern" debug="true">
			<classpath>
				<!--pathelement location="${orm-classes.dir}" /-->
				<path refid="compile-libs" />
			</classpath>
			<src path="${src}" />
			<exclude name="org/**/*.java" />
		</javac>

		<!-- Put the main application classes in one JAR. -->
		<jar duplicate="fail" jarfile="${target.lib}/codeshelf-unobfs.jar">
			<!-- codeshelf classes (exclude any org.xxx classes) -->
			<fileset dir="${target.compiled.classes}">
				<exclude name="org/**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- Jar builder =================================================================================== -->
	<target name="prep.jar" depends="clean, compile">

		<mkdir dir="${appjar.build.dir}" />
		<mkdir dir="${appjar.build.dir}/lib" />

		<copy todir="${appjar.build.dir}/lib">
			<fileset dir="${target.lib}">
				<include name="**/*.jar" />
				<exclude name="**/codeshelf-unobfs.jar" />
				<exclude name="**/datamodels.jar" />
			</fileset>
			<fileset dir="${target.lib}/native" />
		</copy>

		<copy todir="${appjar.build.dir}/lib/native">
			<fileset dir="${target.lib}/native" />
		</copy>

		<!-- Prep the CLASSPATH variable for the manifest. -->
		<fileset id="jardir" dir="${target.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="jarpaths" refid="jardir">
			<map from="${target.lib}" to="lib" />
		</pathconvert>
		<echo>JARPATH: ${jarpaths}</echo>
	</target>

	<!-- Jar helper =================================================================================== -->
	<target name="jar.it">

		<!-- Create the final application JAR file. -->
		<jar duplicate="fail" jarfile="${appjar.build.dir}/${codeshelf.app.jar.name}">
			<zipfileset dir="${target.resources}/"/>
			<zipfileset dir="${target.web}/" prefix="web/"/>
			<zipfileset dir="${target.compiled.classes}/">
				<exclude name="com.gadgetworks.codeshelf.model.domain/**.*" />
			</zipfileset>

			<manifest>
				<attribute name="Class-Path" value=". ${jarpaths}" />
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Built-By" value="Codeshelf, Inc. (www.codeshelf.com)" />
			</manifest>
		</jar>
		<copy todir="${appjar.build.dir}">
			<fileset dir="${target.lib}">
				<include name="${codeshelf.app.jar.name}" />
			</fileset>
		</copy>
	</target>

	<!-- JAR the server  =================================================================================== -->
	<target name="jar.server">
		<property name="codeshelf.app.jar.name" value="server.codeshelf.jar" />
		<property name="main.class" value="com.gadgetworks.codeshelf.application.ServerMain" />
		<antcall target="jar.it" />
	</target>

	<!-- JAR the site controller  =================================================================================== -->
	<target name="jar.sitecontroller">
		<property name="codeshelf.app.jar.name" value="sitecontroller.codeshelf.jar" />
		<property name="main.class" value="com.gadgetworks.codeshelf.application.CsSiteControllerMain" />
		<antcall target="jar.it" />
	</target>

	<target name="build.all" depends="prep.jar" description="Build the server app as a launchable jar">
		<antcall target="jar.server" />
		<antcall target="jar.sitecontroller" />
	</target>

        <!--Compiles the JUnit tests ${test.dir} directory into ${target.test} directory-->
	<target name="compile.junit">
		<mkdir dir="${target.test}" />
	        <javac destdir="${target.test}" sourcepath="" source="${javac.compile.using.version}" target="${javac.compile.using.version}" verbose="false" compiler="modern" debug="true">
        	        <classpath>
        				<pathelement location="${target.resources}" />
               	        <path refid="compile-libs" />
						<path refid="test-libs" />
        	        </classpath>
                	<src path="${test.dir}" />
	        </javac>
			<copy todir="${target.test}">
			  <fileset dir="${test.dir}">
				<include name="**/resource/*"/>
			  </fileset>
			</copy>
	</target>

	<target name="junit" depends="build.all, compile.junit">
		<mkdir dir="${target.report}" />
		<junit printsummary="on" fork="true" haltonfailure="no" failureproperty="test.failed">
			<classpath>
				<pathelement location="${target.resources}" />
				<pathelement location="${target.compiled.classes}" />
				<pathelement location="${target.test}" />
				<pathelement location="${target.lib}" />
				<path refid="compile-libs" />
				<path refid="test-libs" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${target.report}" >
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
		<fail message="JUnit test case failure detected, check results." if="test.failed" />
	</target>

</project>
