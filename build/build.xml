<?xml version="1.0" encoding="UTF-8"?>

<project name="CodeShelf" default="build.jar" basedir="..">

	<description>
		CodeShelf build script.
    </description>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/build/lib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<taskdef name="pack200" classname="com.sun.tools.apache.ant.pack200.Pack200Task">
		<classpath>
			<pathelement location="${basedir}/build/lib/pack200task.jar" />
		</classpath>
	</taskdef>


	<!-- Optional add this file to override any of the properties below -->
	<property file="${basedir}/build/build.properties" />
	<property file="${basedir}/conf/version.properties" />

	<!-- Setup the full version property correctly -->
	<if>
		<equals arg1="${version.status}" arg2="" />
		<then>
			<property name="version" value="${version.major}.${version.minor}.${version.revision}" />
			<property name="version.filename" value="${version.major}_${version.minor}_${version.revision}" />
		</then>
		<else>
			<property name="version" value="${version.major}.${version.minor}.${version.revision}.${version.status}" />
			<property name="version.filename" value="${version.major}_${version.minor}_${version.revision}_${version.status}" />
		</else>
	</if>

	<description>CodeShelf Build</description>
	<!--set global properties for this build-->
	<property name="src" location="${basedir}/src" />
	<property name="libs.dir" location="${basedir}/lib" />
	<property name="libs.dist.dir" location="${basedir}/lib/dist" />
	<property name="libs.merge.dir" location="${basedir}/lib/merge" />
	<property name="keystore" location="${basedir}/build/keystore" />
	<property name="target" location="${basedir}/target" />
	<property name="target.build" location="${target}/build" />
	<property name="should.obfuscate" value="false" />
	<property name="target.obfuscated.classes" location="${target.build}/obfuscated-classes" />
	<property name="target.compiled.classes" location="${target.build}/compiled-classes" />
	<if>
		<equals arg1="${should.obfuscate}" arg2="true" />
		<then>
			<property name="target.classes" location="${target.obfuscated.classes}" />
		</then>
		<else>
			<property name="target.classes" location="${target.compiled.classes}" />
		</else>
	</if>
	<property name="target.enhanced.classes" location="${target.build}/enhanced-classes" />
	<property name="target.resources" location="${target.build}/resources" />
	<property name="target.lib" location="${target.build}/lib" />
	<property name="target.docs" location="${target.build}/docs" />
	<property name="target.docsapi" location="${target.docs}/api" />
	<property name="bin" location="${target.build}/bin" />
	<property name="conf.dir" location="${basedir}/conf" />
	<property name="resources.dir" location="${basedir}/resources" />

	<!-- Installer Ant Script -->

	<property name="installer.app_name" value="CodeShelf" />
	<property name="installer.app_short_name" value="CodeShelf" />
	<property name="installer.product_name" value="CodeShelf" />
	<property name="installer.publisher" value="Gadgetworks, LLC" />
	<property name="installer.publisher_url" value="www.gadgetworks.com" />
	<property name="installer.file_prefix" value="${installer.app_short_name}" />
	<property name="installer.release_root_path" value="${target.build}" />

	<property name="osx.app.dir" value="${target}/osx-app" />
	<property name="osx.app.file" value="${osx.app.dir}/CodeShelf.app" />
	<property name="osx.prefpane.dir" value="${target}/osx-prefPane" />
	<property name="osx.package.dir" value="${target}/osx-package" />
	<property name="osx.package.file" value="CodeShelf-${version.major}.${version.minor}.${version.revision}.pkg" />
	<property name="osx.dmg.dir" value="${target}/osx-dmg" />
	<property name="osx.dmg.file" value="${osx.dmg.dir}/CodeShelf.dmg" />
	<property name="osx.dmg.volume" value="CodeShelf-${version.major}.${version.minor}.${version.revision}" />
	<property name="pack200.excludes" value="jingle.jar,mail.jar,activation.jar,dom4j.jar,startup.jar,base.jar,i4jruntime.jar" />

	<property name="javac.compile.using.version" value="1.7" />

	<property name="jws.build.dir" value="${target}/jws-codeshelf" />
	<property name="appjar.build.dir" value="${target}/appjar" />
	<property name="launch4j.dir" location="{$target}" />
	<property name="debian.installer.dir" value="${target}/debian-installer" />

	<property name="codeshelf.app.jar.name" value="codeshelf.jar" />

	<property name="ebean.build.dir" value="${basedir}/build" />
	<property name="ebean.lib.dir" value="${ebean.build.dir}/lib" />

	<!-- Define the compile set -->
	<path id="compile-libs">
		<fileset dir="${target.lib}" includes="smackx-jingle.jar" />
		<fileset dir="${target.lib}" includes="*.jar" />
		<fileset dir="${libs.merge.dir}" includes="FlyWeightController.jar" />
	</path>

	<!-- clean =================================================================================== -->
	<target name="clean" description="Deletes files generated during the build.">
		<!--Delete created directory trees-->
		<delete includeemptydirs="true" failonerror="false" verbose="false" includes="*.* .*">
			<fileset dir="${target}" followsymlinks="false" />
		</delete>
	</target>

	<!-- init =================================================================================== -->
	<target name="init">
		<!-- Check for min build requirements -->
		<condition property="ant.not.ok" value="true">
			<not>
				<or>
					<contains string="${ant.version}" substring="1.6" />
					<contains string="${ant.version}" substring="1.7" />
					<contains string="${ant.version}" substring="1.8" />
				</or>
			</not>
		</condition>
		<condition property="java.not.ok" value="true">
			<not>
				<or>
					<contains string="${ant.java.version}" substring="1.7" />
				</or>
			</not>
		</condition>
		<fail if="ant.not.ok" message="Must use Ant 1.6.x, 1.7.x, or 1.8.x to build CodeShelf" />
		<fail if="java.not.ok" message="Must use JDK 1.7.x or higher to build CodeShelf" />

		<!-- Platform-specific initializations -->
		<condition property="windows">
			<os family="windows" />
		</condition>
		<condition property="unix">
			<os family="unix" />
		</condition>
		<condition property="solaris">
			<os name="SunOS" />
		</condition>
		<condition property="linux">
			<os name="Linux" />
		</condition>
		<condition property="osx">
			<os name="Mac OS X" />
		</condition>

		<!--creates the build directory-->
		<mkdir dir="${target}" />
		<mkdir dir="${target.compiled.classes}" />
		<mkdir dir="${target.obfuscated.classes}" />
		<mkdir dir="${target.enhanced.classes}" />
		<mkdir dir="${target.build}" />
		<mkdir dir="${target.resources}" />
		<mkdir dir="${target.lib}" />
		<mkdir dir="${target.docs}" />

	</target>

	<!-- resources =================================================================================== -->
	<target name="resources">
		<!--copy todir="${target.resources}">
			<fileset dir="${resources.dir}">
				<exclude name="*.bat" />
				<exclude name="settings.xml" />
				<include name="*.*" />
			</fileset>
		</copy-->
		<copy todir="${target.resources}/conf">
			<fileset dir="${conf.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
		<!--copy todir="${target.resources}/images">
			<fileset dir="${resources.dir}/images">
				<include name="*.*" />
			</fileset>
		</copy-->
		<!--copy todir="${target.resources}/sounds">
			<fileset dir="${resources.dir}/sounds">
				<include name="*.*" />
			</fileset>
		</copy-->
	</target>

	<!-- build =================================================================================== -->
	<target name="build" depends="init, resources">

		<copy todir="${target.lib}">
			<fileset dir="${libs.dist.dir}">
				<include name="**/*.*" />
				<exclude name="**/FlyWeightController.jar*" />
			</fileset>
		</copy>
		<copy todir="${target.lib}">
			<fileset dir="${basedir}/build/lib">
				<include name="i4jruntime.jar" />
			</fileset>
		</copy>

		<echo message="${toString:compile-libs}" />

		<!--Compiles the java code from ${src} directory into ${target.compiled.classes} directory-->
		<javac destdir="${target.compiled.classes}" sourcepath="" source="${javac.compile.using.version}" target="${javac.compile.using.version}" verbose="false" compiler="modern" debug="true">
			<classpath>
				<!--pathelement location="${orm-classes.dir}" /-->
				<path refid="compile-libs" />
			</classpath>
			<src path="${src}" />
			<exclude name="com/gadgetworks/codeshelf/p2p/jingle/speex/**" />
			<exclude name="com/gadgetworks/codeshelf/model/dao/GWDerbyAdapter.java" />
			<exclude name="com/gadgetworks/codeshelf/model/dao/GWH2Adapter.java" />
			<exclude name="org/**/*.java" />
			<exclude name="com/sun/media/rtp/**" />
		</javac>

		<!-- Put the FlyweightController classes into the compiled classes folder, so that we can obfuscate and enhance them. -->
		<unjar dest="${target.compiled.classes}">
			<patternset>
				<include name="com/gadgetworks/**/*.class" />
			</patternset>
			<fileset dir="${libs.merge.dir}">
				<include name="**/FlyWeightController.jar" />
			</fileset>
		</unjar>

		<!-- Put the main application classes in one JAR. -->
		<jar duplicate="fail" jarfile="${target.lib}/codeshelf-unobfs.jar">
			<!-- codeshelf classes (exclude any org.xxx classes) -->
			<fileset dir="${target.compiled.classes}">
				<exclude name="org/**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- enhance =================================================================================== -->
	<target name="ebean-enhance" description="Enhance classes">

		<echo message="===================================================================" />
		<echo message="Enhancing the MODULE files" />
		<echo message="===================================================================" />

		<!-- define the task enhancer -->
		<taskdef name="ebeanEnhance" classname="com.avaje.ebean.enhance.ant.AntEnhanceTask">
			<classpath>
				<!--pathelement location="${orm-classes.dir}" /-->
				<pathelement location="${ebean.lib.dir}/ebean-2.7.7-agent.jar" />
				<pathelement location="${target.classes}" />
				<path refid="compile-libs" />
			</classpath>
		</taskdef>

		<!-- enhance -->
		<echo>"${target.enhanced.classes}"</echo>
		<ebeanEnhance packages="com.gadgetworks.codeshelf.model.domain" classDestination="${target.enhanced.classes}" classSource="${target.classes}" transformargs="debug=5" classpath="${target.lib}/*.jar" />

	</target>

	<!-- sign-jars-dist =================================================================================== -->
	<target name="sign-jars-dist">
		<echo level="info">Signing JARS...</echo>
		<!--<signjar jar="${target.lib}/base.jar" keystore="${keystore}" alias="myself" storepass="password" />-->
		<signjar keystore="${keystore}" alias="myself" storepass="password">
			<fileset dir="${libs.dist.dir}">
				<include name="**/*.jar" />
			</fileset>
		</signjar>
	</target>

	<!-- obfuscate-jars =================================================================================== -->
	<target name="obfuscate" depends="">

		<taskdef resource="proguard/ant/task.properties" classpath="${basedir}/build/lib/proguard.jar" />

		<proguard>
			-target 1.7
			-injars      "${target.compiled.classes}"
			-outjars     "${target.obfuscated.classes}"
			-printmapping "${target}/codeshelf-obfs.map"
			<!---printseeds-->
			-renamesourcefileattribute SourceFile
			-dontoptimize
			-dontusemixedcaseclassnames
			-ignorewarnings
			-libraryjars "${target.lib}/activation.jar"
			-libraryjars "${target.lib}/aopalliance.jar"
			-libraryjars "${target.lib}/avaje-juli-1.0.0.jar"
			-libraryjars "${target.lib}/commons-codec-1.4.jar"
			-libraryjars "${target.lib}/commons-httpclient-3.1.jar"
			-libraryjars "${target.lib}/commons-io-1.4.jar"
			-libraryjars "${target.lib}/commons-lang-2.2.jar"
			-libraryjars "${target.lib}/commons-logging-1.1.1.jar"
			-libraryjars "${target.lib}/dropbox-java-sdk-1.5.1.jar"
			-libraryjars "${target.lib}/ebean-2.8.2-SNAPSHOT.jar"
			-libraryjars "${target.lib}/guice-3.0.jar"
			-libraryjars "${target.lib}/h2-1.3.162.jar"
			-libraryjars "${target.lib}/httpclient-4.0.3.jar"
			-libraryjars "${target.lib}/httpcore-4.0.1.jar"
			-libraryjars "${target.lib}/httpmime-4.0.3.jar"
			-libraryjars "${target.lib}/jackson-core-asl-1.9.4.jar"
			-libraryjars "${target.lib}/jackson-mapper-asl-1.9.4.jar"
			-libraryjars "${target.lib}/javax.inject.jar"
			-libraryjars "${target.lib}/javax.persistence_1.0.0.jar"
			-libraryjars "${target.lib}/jcommon-1.0.16.jar"
			-libraryjars "${target.lib}/jetty-http-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-server-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-io-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-util-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-continuation-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-servlet-9.0.0.M2.jar"
			-libraryjars "${target.lib}/jetty-servlets-9.0.0.M2.jar"
			-libraryjars "${target.lib}/json-1.0.jar"
			-libraryjars "${target.lib}/json_simple-1.1.jar"
			-libraryjars "${target.lib}/jul-to-slf4j-1.6.4.jar"
			-libraryjars "${target.lib}/log4j-1.2.14.jar"
			-libraryjars "${target.lib}/lombok-0.11.4.jar"
			-libraryjars "${target.lib}/opencsv-2.3.jar"
			-libraryjars "${target.lib}/servlet-api-3.0-alpha-1.jar"
			-libraryjars "${target.lib}/slf4j-api-1.6.4.jar"
			-libraryjars "${target.lib}/slf4j-log4j12-1.6.4.jar"
			-libraryjars "${target.lib}/WebSocket-1.0.0-SNAPSHOT.jar"
			-libraryjars "${target.lib}/ws-commons-util-1.0.2.jar"
			-libraryjars "${target.lib}/xmlrpc-client-3.1.3.jar"
			-libraryjars "${target.lib}/xmlrpc-common-3.1.3.jar"
			-libraryjars "${obfuscate.core.classes}"
			-libraryjars "${obfuscate.crypto.classes}"
			-libraryjars "${obfuscate.jsse.classes}"
		
			-keepattributes SourceFile,LineNumberTable
			-keepattributes *Annotation*
			-keepattributes Signature
			-keepattributes EnclosingMethod
<!--			-adaptresourcefilenames    **.properties,**.gif,**.jpg
			-adaptresourcefilecontents **.properties,META-INF/MANIFEST.MF
 -->
			${keep.main.classes}
			-keep
				public class com.gadgetworks.codeshelf.model.domain.* {
					&lt;fields&gt;;
					&lt;methods&gt;;
				}
			-keep
				enum com.gadgetworks.codeshelf.command.AckedStateEnum extends java.lang.Enum {
					&lt;fields&gt;;
					&lt;methods&gt;;
				}
			-keep
				public interface com.gadgetworks.codeshelf.command.ICommand {
					&lt;methods&gt;;
				}
			-keep
				public class com.gadgetworks.codeshelf.command.NetAddress {
					&lt;methods&gt;;
				}
			-keep
				public class com.gadgetworks.codeshelf.command.NetEndpoint {
					&lt;methods&gt;;
				}
			-keep
				public class com.gadgetworks.codeshelf.command.NetworkID {
					&lt;methods&gt;;
				}
			-keep
				enum com.gadgetworks.codeshelf.command.NetworkTypeEnum extends java.lang.Enum {
					&lt;fields&gt;;
					&lt;methods&gt;;
				}
			-keep
				enum com.gadgetworks.codeshelf.controller.NetworkDeviceStateEnum extends java.lang.Enum {
					&lt;fields&gt;;
					&lt;methods&gt;;
				}
			-keep
				public interface com.gadgetworks.flyweightcontroller.controller.IController {
					&lt;methods&gt;;
				}
			-keep
				enum com.gadgetworks.codeshelf.model.* extends java.lang.Enum {
					&lt;fields&gt;;
					&lt;methods&gt;;
				}
<!--
			-keepclassmembers class * {
			    public &lt;init&gt;(...);
				}
-->

			-keepattributes *Annotation*,Signature
			-keep class com.google.inject.Binder    
			-keep public class com.google.inject.Inject
			 # keeps all fields and Constructors with @Inject
			-keepclassmembers,allowobfuscation class * {
			    @com.google.inject.Inject &lt;fields&gt;;
			    @com.google.inject.Inject &lt;init&gt;(...);
			}
		</proguard>
	</target>

	<!-- javadocs =================================================================================== -->
	<target name="release.javadocs" depends="javadocs" description="creates javadocs version for developer source builds">
	</target>

	<!-- javadocs =================================================================================== -->
	<target name="javadocs" depends="init">
		<mkdir dir="${target.docsapi}" />
		<javadoc destdir="${target.docsapi}" author="true" version="true" use="true" windowtitle="API for Agent">
			<classpath>
				<path refid="agent.dependencies" />
			</classpath>
			<fileset dir="${src}" defaultexcludes="yes">
				<exclude name="**/*.properties" />
				<exclude name="**/*.html" />
			</fileset>
		</javadoc>
	</target>

	<!-- Jar builder =================================================================================== -->
	<target name="build.jar" depends="clean, build" description="Build the app as a launchable jar">

		<property name="main.class" value="com.gadgetworks.codeshelf.application.Main" />
		<mkdir dir="${appjar.build.dir}" />
		<mkdir dir="${appjar.build.dir}/lib" />

		<property name="obfuscate.core.classes" value="${java.home}/../jre/lib/rt.jar" />
		<property name="obfuscate.crypto.classes" value="${java.home}/../jre/lib/jce.jar" />
		<property name="obfuscate.jsse.classes" value="${java.home}/../jre/lib/jsse.jar" />
		<property name="keep.main.classes" value="		
			-keep 
            public class com.gadgetworks.codeshelf.application.Main {
                public static void main(java.lang.String[]);
                static int actionProc(int, int, int);
            }" />

		<copy todir="${appjar.build.dir}/lib">
			<fileset dir="${target.lib}">
				<include name="**/*.jar" />
				<exclude name="**/codeshelf-unobfs.jar" />
				<exclude name="**/datamodels.jar" />
			</fileset>
		</copy>

		<!-- Obfuscate if requested -->
		<if>
			<equals arg1="${should.obfuscate}" arg2="true" />
			<then>
				<antcall target="obfuscate" />
			</then>
		</if>

		<antcall target="ebean-enhance" />

		<!-- Prep the CLASSPATH variable for the manifest. -->
		<fileset id="jardir" dir="${target.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="jarpaths" refid="jardir">
			<map from="${target.lib}" to="lib" />
		</pathconvert>

		<!-- Create the final application JAR file. -->
		<jar duplicate="fail" jarfile="${appjar.build.dir}/${codeshelf.app.jar.name}">
			<zipfileset dir="${target.enhanced.classes}" />
			<zipfileset dir="${target.resources}" />
			<zipfileset dir="${target.classes}/">
				<exclude name="com.gadgetworks.codeshelf.model.domain/**.*" />
			</zipfileset>

			<manifest>
				<attribute name="Class-Path" value="${codeshelf.app.jar.name} . ${jarpaths}" />
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Built-By" value="Gadgetworks, LLC (www.gadgetworks.com)" />
			</manifest>
		</jar>

		<copy todir="${appjar.build.dir}">
			<fileset dir="${target.lib}">
				<include name="${codeshelf.app.jar.name}" />
			</fileset>
		</copy>
	</target>

	<target name="deploy" depends="build.jar">
		<input message="SCP password:" addproperty="scp.password">
			<!--handler classname="org.apache.tools.ant.input.SecureInputHandler" /-->
		</input>

		<scp todir="codeshelf:${scp.password}@198.101.238.245:/opt/codeshelf/engine" verbose="true">
			<fileset dir="${appjar.build.dir}">
				<include name="**/*" />
				<modified>
					<param name="cache.cachefile" value="${basedir}/build/engine.scp.cache"/>
				</modified>
			</fileset>
		</scp>
	</target>
</project>


